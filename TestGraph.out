==21326== Memcheck, a memory error detector
==21326== Copyright (C) 2002-2013, and GNU GPL'd, by Julian Seward et al.
==21326== Using Valgrind-3.10.0.SVN and LibVEX; rerun with -h for copyright info
==21326== Command: ./TestGraph
==21326== 
Running main() from gtest_main.cc
[==========] Running 50 tests from 2 test cases.
[----------] Global test environment set-up.
[----------] 25 tests from TestGraph/0, where TypeParam = boost::adjacency_list<boost::setS, boost::vecS, boost::directedS, boost::no_property, boost::no_property, boost::no_property, boost::listS>
[ RUN      ] TestGraph/0.add_vertex_1
[       OK ] TestGraph/0.add_vertex_1 (36 ms)
[ RUN      ] TestGraph/0.num_vertex_1
[       OK ] TestGraph/0.num_vertex_1 (6 ms)
[ RUN      ] TestGraph/0.vertex_1
[       OK ] TestGraph/0.vertex_1 (6 ms)
[ RUN      ] TestGraph/0.vertex_2
[       OK ] TestGraph/0.vertex_2 (14 ms)
[ RUN      ] TestGraph/0.test_vertex
[       OK ] TestGraph/0.test_vertex (3 ms)
[ RUN      ] TestGraph/0.vertices_1
[       OK ] TestGraph/0.vertices_1 (7 ms)
[ RUN      ] TestGraph/0.vertices_2
[       OK ] TestGraph/0.vertices_2 (4 ms)
[ RUN      ] TestGraph/0.vertices_3
[       OK ] TestGraph/0.vertices_3 (5 ms)
[ RUN      ] TestGraph/0.vertices_4
[       OK ] TestGraph/0.vertices_4 (7 ms)
[ RUN      ] TestGraph/0.vertices_5
[       OK ] TestGraph/0.vertices_5 (10 ms)
[ RUN      ] TestGraph/0.test_vertices
[       OK ] TestGraph/0.test_vertices (4 ms)
[ RUN      ] TestGraph/0.add_edge_1
[       OK ] TestGraph/0.add_edge_1 (27 ms)
[ RUN      ] TestGraph/0.source_1
[       OK ] TestGraph/0.source_1 (2 ms)
[ RUN      ] TestGraph/0.source_2
[       OK ] TestGraph/0.source_2 (3 ms)
[ RUN      ] TestGraph/0.target_1
[       OK ] TestGraph/0.target_1 (3 ms)
[ RUN      ] TestGraph/0.target_2
[       OK ] TestGraph/0.target_2 (4 ms)
[ RUN      ] TestGraph/0.adjacent_vertices_1
[       OK ] TestGraph/0.adjacent_vertices_1 (15 ms)
[ RUN      ] TestGraph/0.test_adjacent_vertices
[       OK ] TestGraph/0.test_adjacent_vertices (13 ms)
[ RUN      ] TestGraph/0.edge_1
[       OK ] TestGraph/0.edge_1 (13 ms)
[ RUN      ] TestGraph/0.add_edge_2
[       OK ] TestGraph/0.add_edge_2 (6 ms)
[ RUN      ] TestGraph/0.num_edges_1
[       OK ] TestGraph/0.num_edges_1 (8 ms)
[ RUN      ] TestGraph/0.edge_3
[       OK ] TestGraph/0.edge_3 (1487 ms)
[ RUN      ] TestGraph/0.add_edge_3
[       OK ] TestGraph/0.add_edge_3 (4 ms)
[ RUN      ] TestGraph/0.test_edge
[       OK ] TestGraph/0.test_edge (6 ms)
[ RUN      ] TestGraph/0.test_edges
[       OK ] TestGraph/0.test_edges (22 ms)
[----------] 25 tests from TestGraph/0 (1727 ms total)

[----------] 25 tests from TestGraph/1, where TypeParam = Graph
[ RUN      ] TestGraph/1.add_vertex_1
[       OK ] TestGraph/1.add_vertex_1 (41 ms)
[ RUN      ] TestGraph/1.num_vertex_1
[       OK ] TestGraph/1.num_vertex_1 (6 ms)
[ RUN      ] TestGraph/1.vertex_1
[       OK ] TestGraph/1.vertex_1 (5 ms)
[ RUN      ] TestGraph/1.vertex_2
[       OK ] TestGraph/1.vertex_2 (16 ms)
[ RUN      ] TestGraph/1.test_vertex
[       OK ] TestGraph/1.test_vertex (3 ms)
[ RUN      ] TestGraph/1.vertices_1
[       OK ] TestGraph/1.vertices_1 (7 ms)
[ RUN      ] TestGraph/1.vertices_2
[       OK ] TestGraph/1.vertices_2 (3 ms)
[ RUN      ] TestGraph/1.vertices_3
[       OK ] TestGraph/1.vertices_3 (6 ms)
[ RUN      ] TestGraph/1.vertices_4
[       OK ] TestGraph/1.vertices_4 (8 ms)
[ RUN      ] TestGraph/1.vertices_5
[       OK ] TestGraph/1.vertices_5 (16 ms)
[ RUN      ] TestGraph/1.test_vertices
[       OK ] TestGraph/1.test_vertices (5 ms)
[ RUN      ] TestGraph/1.add_edge_1
[       OK ] TestGraph/1.add_edge_1 (19 ms)
[ RUN      ] TestGraph/1.source_1
[       OK ] TestGraph/1.source_1 (3 ms)
[ RUN      ] TestGraph/1.source_2
[       OK ] TestGraph/1.source_2 (8 ms)
[ RUN      ] TestGraph/1.target_1
[       OK ] TestGraph/1.target_1 (3 ms)
[ RUN      ] TestGraph/1.target_2
[       OK ] TestGraph/1.target_2 (4 ms)
[ RUN      ] TestGraph/1.adjacent_vertices_1
[       OK ] TestGraph/1.adjacent_vertices_1 (3 ms)
[ RUN      ] TestGraph/1.test_adjacent_vertices
[       OK ] TestGraph/1.test_adjacent_vertices (7 ms)
[ RUN      ] TestGraph/1.edge_1
[       OK ] TestGraph/1.edge_1 (6 ms)
[ RUN      ] TestGraph/1.add_edge_2
[       OK ] TestGraph/1.add_edge_2 (5 ms)
[ RUN      ] TestGraph/1.num_edges_1
[       OK ] TestGraph/1.num_edges_1 (4 ms)
[ RUN      ] TestGraph/1.edge_3
[       OK ] TestGraph/1.edge_3 (2805 ms)
[ RUN      ] TestGraph/1.add_edge_3
[       OK ] TestGraph/1.add_edge_3 (4 ms)
[ RUN      ] TestGraph/1.test_edge
[       OK ] TestGraph/1.test_edge (7 ms)
[ RUN      ] TestGraph/1.test_edges
[       OK ] TestGraph/1.test_edges (6 ms)
[----------] 25 tests from TestGraph/1 (3005 ms total)

[----------] Global test environment tear-down
[==========] 50 tests from 2 test cases ran. (4758 ms total)
[  PASSED  ] 50 tests.
==21326== 
==21326== HEAP SUMMARY:
==21326==     in use at exit: 0 bytes in 0 blocks
==21326==   total heap usage: 71,858 allocs, 71,858 frees, 1,940,555 bytes allocated
==21326== 
==21326== All heap blocks were freed -- no leaks are possible
==21326== 
==21326== For counts of detected and suppressed errors, rerun with: -v
==21326== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
File 'TestGraph.c++'
Lines executed:100.00% of 283
Branches executed:62.13% of 2408
Taken at least once:32.48% of 2408
Calls executed:45.10% of 2104
Creating 'TestGraph.c++.gcov'

File 'Graph.h'
Lines executed:100.00% of 72
Branches executed:100.00% of 34
Taken at least once:55.88% of 34
Calls executed:84.21% of 57
Creating 'Graph.h.gcov'

