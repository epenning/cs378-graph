==16209== Memcheck, a memory error detector
==16209== Copyright (C) 2002-2013, and GNU GPL'd, by Julian Seward et al.
==16209== Using Valgrind-3.10.0.SVN and LibVEX; rerun with -h for copyright info
==16209== Command: ./TestGraph
==16209== 
Running main() from gtest_main.cc
[==========] Running 20 tests from 2 test cases.
[----------] Global test environment set-up.
[----------] 10 tests from TestGraph/0, where TypeParam = boost::adjacency_list<boost::setS, boost::vecS, boost::directedS, boost::no_property, boost::no_property, boost::no_property, boost::listS>
[ RUN      ] TestGraph/0.add_vertex_1
[       OK ] TestGraph/0.add_vertex_1 (37 ms)
[ RUN      ] TestGraph/0.num_vertex_1
[       OK ] TestGraph/0.num_vertex_1 (7 ms)
[ RUN      ] TestGraph/0.vertex_1
[       OK ] TestGraph/0.vertex_1 (4 ms)
[ RUN      ] TestGraph/0.vertex_2
[       OK ] TestGraph/0.vertex_2 (14 ms)
[ RUN      ] TestGraph/0.test_vertex
[       OK ] TestGraph/0.test_vertex (3 ms)
[ RUN      ] TestGraph/0.add_edge_1
[       OK ] TestGraph/0.add_edge_1 (27 ms)
[ RUN      ] TestGraph/0.add_edge_2
[       OK ] TestGraph/0.add_edge_2 (9 ms)
[ RUN      ] TestGraph/0.test_edge
[       OK ] TestGraph/0.test_edge (21 ms)
[ RUN      ] TestGraph/0.vertices_1
[       OK ] TestGraph/0.vertices_1 (5 ms)
[ RUN      ] TestGraph/0.test_vertices
[       OK ] TestGraph/0.test_vertices (5 ms)
[----------] 10 tests from TestGraph/0 (141 ms total)

[----------] 10 tests from TestGraph/1, where TypeParam = Graph
[ RUN      ] TestGraph/1.add_vertex_1
[       OK ] TestGraph/1.add_vertex_1 (35 ms)
[ RUN      ] TestGraph/1.num_vertex_1
[       OK ] TestGraph/1.num_vertex_1 (6 ms)
[ RUN      ] TestGraph/1.vertex_1
[       OK ] TestGraph/1.vertex_1 (6 ms)
[ RUN      ] TestGraph/1.vertex_2
[       OK ] TestGraph/1.vertex_2 (16 ms)
[ RUN      ] TestGraph/1.test_vertex
[       OK ] TestGraph/1.test_vertex (3 ms)
[ RUN      ] TestGraph/1.add_edge_1
[       OK ] TestGraph/1.add_edge_1 (4 ms)
[ RUN      ] TestGraph/1.add_edge_2
TestGraph.c++:193: Failure
Expected: (success1) != (success2), actual: true vs true
[  FAILED  ] TestGraph/1.add_edge_2, where TypeParam = Graph (34 ms)
[ RUN      ] TestGraph/1.test_edge
TestGraph.c++:216: Failure
Value of: p1.second
  Actual: true
Expected: false
[  FAILED  ] TestGraph/1.test_edge, where TypeParam = Graph (9 ms)
[ RUN      ] TestGraph/1.vertices_1
==16209== Invalid read of size 4
==16209==    at 0x405D7E: Graph::vertex_iterator::operator*() (in /v/filer4b/v38q001/epenning/CS_378/cs378-graph/TestGraph)
==16209==    by 0x4167B1: TestGraph_vertices_1_Test<Graph>::TestBody() (in /v/filer4b/v38q001/epenning/CS_378/cs378-graph/TestGraph)
==16209==    by 0x449DC2: void testing::internal::HandleExceptionsInMethodIfSupported<testing::Test, void>(testing::Test*, void (testing::Test::*)(), char const*) (in /v/filer4b/v38q001/epenning/CS_378/cs378-graph/TestGraph)
==16209==    by 0x43CF9C: testing::Test::Run() (in /v/filer4b/v38q001/epenning/CS_378/cs378-graph/TestGraph)
==16209==    by 0x43D033: testing::TestInfo::Run() (in /v/filer4b/v38q001/epenning/CS_378/cs378-graph/TestGraph)
==16209==    by 0x43D134: testing::TestCase::Run() (in /v/filer4b/v38q001/epenning/CS_378/cs378-graph/TestGraph)
==16209==    by 0x43D3AC: testing::internal::UnitTestImpl::RunAllTests() (in /v/filer4b/v38q001/epenning/CS_378/cs378-graph/TestGraph)
==16209==    by 0x43D68D: testing::UnitTest::Run() (in /v/filer4b/v38q001/epenning/CS_378/cs378-graph/TestGraph)
==16209==    by 0x40511F: main (in /v/filer4b/v38q001/epenning/CS_378/cs378-graph/TestGraph)
==16209==  Address 0x20 is not stack'd, malloc'd or (recently) free'd
==16209== 
==16209== 
==16209== Process terminating with default action of signal 11 (SIGSEGV)
==16209==  Access not within mapped region at address 0x20
==16209==    at 0x405D7E: Graph::vertex_iterator::operator*() (in /v/filer4b/v38q001/epenning/CS_378/cs378-graph/TestGraph)
==16209==    by 0x4167B1: TestGraph_vertices_1_Test<Graph>::TestBody() (in /v/filer4b/v38q001/epenning/CS_378/cs378-graph/TestGraph)
==16209==    by 0x449DC2: void testing::internal::HandleExceptionsInMethodIfSupported<testing::Test, void>(testing::Test*, void (testing::Test::*)(), char const*) (in /v/filer4b/v38q001/epenning/CS_378/cs378-graph/TestGraph)
==16209==    by 0x43CF9C: testing::Test::Run() (in /v/filer4b/v38q001/epenning/CS_378/cs378-graph/TestGraph)
==16209==    by 0x43D033: testing::TestInfo::Run() (in /v/filer4b/v38q001/epenning/CS_378/cs378-graph/TestGraph)
==16209==    by 0x43D134: testing::TestCase::Run() (in /v/filer4b/v38q001/epenning/CS_378/cs378-graph/TestGraph)
==16209==    by 0x43D3AC: testing::internal::UnitTestImpl::RunAllTests() (in /v/filer4b/v38q001/epenning/CS_378/cs378-graph/TestGraph)
==16209==    by 0x43D68D: testing::UnitTest::Run() (in /v/filer4b/v38q001/epenning/CS_378/cs378-graph/TestGraph)
==16209==    by 0x40511F: main (in /v/filer4b/v38q001/epenning/CS_378/cs378-graph/TestGraph)
==16209==  If you believe this happened as a result of a stack
==16209==  overflow in your program's main thread (unlikely but
==16209==  possible), you can try to increase the size of the
==16209==  main thread stack using the --main-stacksize= flag.
==16209==  The main thread stack size used in this run was 16777216.
==16209== 
==16209== HEAP SUMMARY:
==16209==     in use at exit: 9,933 bytes in 160 blocks
==16209==   total heap usage: 929 allocs, 769 frees, 209,961 bytes allocated
==16209== 
==16209== LEAK SUMMARY:
==16209==    definitely lost: 0 bytes in 0 blocks
==16209==    indirectly lost: 0 bytes in 0 blocks
==16209==      possibly lost: 4,269 bytes in 76 blocks
==16209==    still reachable: 5,664 bytes in 84 blocks
==16209==         suppressed: 0 bytes in 0 blocks
==16209== Rerun with --leak-check=full to see details of leaked memory
==16209== 
==16209== For counts of detected and suppressed errors, rerun with: -v
==16209== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
Segmentation fault (core dumped)
